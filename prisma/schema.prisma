generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model content {
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title              String               @db.VarChar(255)
  explanation        String
  creator_id         String?              @db.Uuid
  created_at         DateTime             @default(now()) @db.Timestamp(6)
  updated_at         DateTime             @default(now()) @db.Timestamp(6)
  user               user?                @relation(fields: [creator_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  editor_review      editor_review[]
  subscriber_content subscriber_content[]
}

model editor_review {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content_id String?  @db.Uuid
  editor_id  String?  @db.Uuid
  status     String   @db.VarChar(50)
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  content    content? @relation(fields: [content_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user?    @relation(fields: [editor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model organization {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model subscriber_content {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  subscriber_id String?  @db.Uuid
  content_id    String?  @db.Uuid
  created_at    DateTime @default(now()) @db.Timestamp(6)
  updated_at    DateTime @default(now()) @db.Timestamp(6)
  content       content? @relation(fields: [content_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user          user?    @relation(fields: [subscriber_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email              String               @unique @db.VarChar(255)
  firstName          String?              @db.VarChar(255)
  lastName           String?              @db.VarChar(255)
  roq_user_id        String               @db.VarChar(255)
  tenant_id          String               @db.VarChar(255)
  created_at         DateTime             @default(now()) @db.Timestamp(6)
  updated_at         DateTime             @default(now()) @db.Timestamp(6)
  content            content[]
  editor_review      editor_review[]
  organization       organization[]
  subscriber_content subscriber_content[]
}
